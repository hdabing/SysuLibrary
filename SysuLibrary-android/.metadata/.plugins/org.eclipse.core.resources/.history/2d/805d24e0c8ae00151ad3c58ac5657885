package com.project.sysumobilelibrary;

import java.util.ArrayList;
import java.util.HashMap;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.android.volley.Response.ErrorListener;
import com.android.volley.Response.Listener;
import com.android.volley.VolleyError;
import com.example.textdrawable.drawable.TextDrawable;
import com.handmark.pulltorefresh.library.PullToRefreshBase;
import com.handmark.pulltorefresh.library.PullToRefreshBase.Mode;
import com.handmark.pulltorefresh.library.PullToRefreshListView;
import com.handmark.pulltorefresh.library.PullToRefreshBase.OnRefreshListener2;
import com.project.sysumobilelibrary.adapter.MySearchListViewAdapter;
import com.project.sysumobilelibrary.entity.LikeBook;
import com.project.sysumobilelibrary.entity.SearchBook;
import com.project.sysumobilelibrary.entity.SearchSetting;
import com.project.sysumobilelibrary.global.MyApplication;
import com.project.sysumobilelibrary.global.MyURL;
import com.project.sysumobilelibrary.utils.MyNetworkUtil;
import com.quinny898.library.persistentsearch.SearchBox;
import com.quinny898.library.persistentsearch.SearchBox.MenuListener;
import com.quinny898.library.persistentsearch.SearchBox.SearchListener;
import com.quinny898.library.persistentsearch.SearchResult;

import dmax.dialog.SpotsDialog;
import android.app.AlertDialog;
import android.app.Fragment;
import android.content.Intent;
import android.graphics.Color;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.speech.RecognizerIntent;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.AlphaAnimation;
import android.view.animation.Animation;
import android.view.animation.AnimationSet;
import android.view.animation.LayoutAnimationController;
import android.widget.ListView;
import android.widget.Toast;

public class SearchFragment extends Fragment {
	private static final String TAG = "SearchFragment";

	private View view;
	private SearchBox searchBox;
	private PullToRefreshListView myListView;

	public static SearchSetting searchSetting = new SearchSetting();

	public static int next_index = 1;
	public static ArrayList<LikeBook> searchBooks = new ArrayList<LikeBook>();
	public static MySearchListViewAdapter searchListViewAdapter;
	private AlertDialog loading;
	
	private final static int CODE_TOAST_MSG = 0;

	Handler handler = new Handler() {
		public void handleMessage(android.os.Message msg) {
			switch (msg.what) {
			case CODE_TOAST_MSG:
				Toast.makeText(getActivity(), msg.obj.toString(),
						Toast.LENGTH_SHORT).show();
				break;
			}
		};
	};

	public void myToast(String msg) {
		handler.obtainMessage(CODE_TOAST_MSG, msg).sendToTarget();
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		view = inflater.inflate(R.layout.fragment_search, container, false);
		initView();
		return view;
	}

	private void initView() {
		loading = new SpotsDialog(getActivity());
		initListView();
		initSearchBox();

	}

	private void initSearchBox() {
		searchBox = (SearchBox) view.findViewById(R.id.searchbox);
		searchBox.setLogoText("搜索就是如此简单...");
		searchBox.setLogoTextColor(Color.parseColor("#bdbdbd"));
		searchBox.enableVoiceRecognition(getActivity());

		searchBox.setMenuListener(new MenuListener() {

			@Override
			public void onMenuClick() {
				// Hamburger has been clicked
				// myToast("left menu click");
				Intent intent = new Intent(getActivity(),
						SearchSettingsActivity.class);
				startActivity(intent);
			}

		});
		searchBox.setSearchListener(new SearchListener() {

			@Override
			public void onSearchOpened() {
				// Use this to tint the screen
				//myToast("search open");
			}

			@Override
			public void onSearchClosed() {
				// Use this to un-tint the screen
				if (searchBox.getSearchText().trim().equals("搜索就是如此简单...")
						|| searchBox.getSearchText().trim().isEmpty()) {
					searchBox.setLogoTextColor(Color.parseColor("#bdbdbd"));
				} else {
					searchBox.setLogoTextColor(Color.parseColor("#000000"));
				}
				searchBox.clearSearchable();
				
				//myToast("search close");
			}

			@Override
			public void onSearch(String searchTerm) {
				//myToast("onSearch");
				if (!searchTerm.trim().isEmpty()) {
					updateBooks(searchTerm);
				}
			}

			@Override
			public void onResultClick(SearchResult result) {
				// React to a result being clicked
				//myToast("onResultClick" + result.title);
				if (!result.title.trim().isEmpty()) {
					updateBooks(result.title.trim());
				}
			}

			@Override
			public void onSearchCleared() {
				//myToast("onSearchCleared");
			}

			@Override
			public void onSearchTermChanged(String term) {
				addSuggestions(term);
			}
		});

	}

	protected void updateBooks(String word) {
		loading.show();
		Listener<String> listener = new Listener<String>() {
			@Override
			public void onResponse(String response) {
				
				JSONObject jsonObject;
				try {
					jsonObject = new JSONObject(response);
					Log.e(TAG, jsonObject.getString("msg"));
					if (jsonObject.getInt("code") == 1) {
						Log.e(TAG, "检索成功 ");
						JSONArray jsonArray = jsonObject.getJSONArray("books");
						searchBooks.clear();
						next_index = 1;
						addBooksFromJSONArray(jsonArray);
						Log.e(TAG, "size: " + jsonArray.length());
					} else if (jsonObject.getInt("code") == 2){
						myToast(jsonObject.getString("msg"));
					}
					else {
						Log.e(TAG, "检索失败 " + jsonObject.getString("msg"));
					}
				} catch (JSONException e) {
					e.printStackTrace();
					Log.e(TAG, "json解析错误");
					Log.e(TAG, response);
				}
				new FinishRefresh().execute();
				loading.dismiss();
			}
		};
		ErrorListener errorListener = new ErrorListener() {
			@Override
			public void onErrorResponse(VolleyError error) {
				error.printStackTrace();
				Log.e(TAG, "检索失败：" + error.toString());
				myToast("是不是网络出问题了呢？");
				new FinishRefresh().execute();
				loading.dismiss();
			}
		};
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("token", MyApplication.getUser().getToken());
		map.put("keyword", word);
		map.put("keytype", searchSetting.getKeytype());
		map.put("num", searchSetting.getNum());
		map.put("op", searchSetting.getOp());
		map.put("start_year", searchSetting.getStart_year());
		map.put("end_year", searchSetting.getEnd_year());
		map.put("sub_library", searchSetting.getSub_library());
		MyApplication.getMyVolley().addPostStringRequest(MyURL.SEARCH_URL,
				listener, errorListener, map, TAG);

	}
	protected void addBooks(){
		Listener<String> listener = new Listener<String>() {
			@Override
			public void onResponse(String response) {
				JSONObject jsonObject;
				try {
					jsonObject = new JSONObject(response);
					Log.e(TAG, jsonObject.getString("msg"));
					if (jsonObject.getInt("code") == 1) {
						Log.e(TAG, "跳跃成功 ");
						JSONArray jsonArray = jsonObject.getJSONArray("books");
						addBooksFromJSONArray(jsonArray);
						Log.e(TAG, "size: " + jsonArray.length());
					}else if (jsonObject.getInt("code") == 2){
						myToast("都加载完了，降低些要求吧。");
					}
					else {
						Log.e(TAG, "跳跃失败 " + jsonObject.getString("msg"));
					}
				} catch (JSONException e) {
					e.printStackTrace();
					Log.e(TAG, "json解析错误");
					Log.e(TAG, response);
				}
				new FinishRefresh().execute();
			}
		};
		ErrorListener errorListener = new ErrorListener() {
			@Override
			public void onErrorResponse(VolleyError error) {
				error.printStackTrace();
				Log.e(TAG, "跳跃失败：" + error.toString());
				myToast("是不是网络出问题了呢？");
				new FinishRefresh().execute();
			}
		};
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("token", MyApplication.getUser().getToken());
		map.put("jump", next_index+"");
		map.put("num", searchSetting.getNum());
		MyApplication.getMyVolley().addPostStringRequest(MyURL.SEARCH_JUMP_URL,
				listener, errorListener, map, TAG);
	}
	protected void addBooksFromJSONArray(JSONArray jsonArray)
			throws JSONException {
		ArrayList<LikeBook> tmps = new ArrayList<LikeBook>();
		for (int i = 0; i < jsonArray.length(); ++i) {
			JSONObject jsonObject = jsonArray.getJSONObject(i);
			LikeBook searchBook = new LikeBook();
			searchBook.getFromJSONObject(jsonObject);
			next_index = jsonObject.getInt("index")+1;
			searchBooks.add(searchBook);
			
			tmps.add(searchBook);
		}
		searchListViewAdapter.notifyDataSetChanged();
		
		new Thread(new InsertSearchBooksToDB(tmps)).start();
	}

	protected void addSuggestions(String term) {
		String url = MyURL.CGI_URL + MyNetworkUtil.URLEncode(term);
		Listener<String> listener = new Listener<String>() {

			@Override
			public void onResponse(String response) {
				String res = response.replace("aleph_sug({", "")
						.replace("})", "").trim().replace("\"", "");
				if (res.isEmpty()) {
					return;
				}
				searchBox.clearSearchable();
				String[] strs = res.split(",");
				for (String str : strs) {
					String[] tmp = str.split(":");
					TextDrawable d = new TextDrawable(getActivity());
					d.setText(tmp[1].trim());
					SearchResult option = new SearchResult(tmp[0].trim(), d);
					searchBox.addSearchable(option);
				}
			}
		};
		ErrorListener errorListener = new ErrorListener() {

			@Override
			public void onErrorResponse(VolleyError error) {
			}
		};
		MyApplication.getMyVolley().addGetStringRequest(url, listener,
				errorListener, null, TAG);

	}

	private void initListView() {
		myListView = (PullToRefreshListView) view
				.findViewById(R.id.pull_refresh_list);
		myListView.setEmptyView(view.findViewById(R.id.empty));
		
		AnimationSet set = new AnimationSet(false);  
		Animation animation = new AlphaAnimation(0,1);   //AlphaAnimation 控制渐变透明的动画效果  
		animation.setDuration(500);     //动画时间毫秒数  
		set.addAnimation(animation);    //加入动画集合  
		LayoutAnimationController controller = new LayoutAnimationController(set, 1); 
		myListView.setLayoutAnimation(controller);   //ListView 设置动画效果 
		
		myListView.setMode(Mode.BOTH);
		myListView.setOnRefreshListener(new OnRefreshListener2<ListView>() {

			@Override
			public void onPullDownToRefresh(
					PullToRefreshBase<ListView> refreshView) {
				Log.e(TAG, "下拉刷新");
				String word = searchBox.getSearchText().trim();
				if (!word.isEmpty()) {
					updateBooks(word);
				}else{
					myToast("没有关键词，你想让我搜索什么呢？");
					new FinishRefresh().execute();
				}
			}

			@Override
			public void onPullUpToRefresh(
					PullToRefreshBase<ListView> refreshView) {
				Log.e(TAG, "上拉加载");
				if (searchBooks.size() > 0){
					addBooks();
				}else{
					myToast("没有什么可加载的。");
					new FinishRefresh().execute();
				}
				
			}

		});
		searchListViewAdapter = new MySearchListViewAdapter(getActivity(),
				searchBooks);
		myListView.setAdapter(searchListViewAdapter);
	}

	@Override
	public void onActivityResult(int requestCode, int resultCode, Intent data) {
		if (isAdded() && requestCode == SearchBox.VOICE_RECOGNITION_CODE
				&& resultCode == getActivity().RESULT_OK) {
			ArrayList<String> matches = data
					.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);
			searchBox.populateEditText(matches.get(0));
		}
		super.onActivityResult(requestCode, resultCode, data);
	}

	private class FinishRefresh extends AsyncTask<Void, Void, Void> {
		@Override
		protected Void doInBackground(Void... params) {
			return null;
		}

		@Override
		protected void onPostExecute(Void result) {
			myListView.onRefreshComplete();
		}
	}
	
	class InsertSearchBooksToDB implements Runnable{
		private ArrayList<LikeBook> books;
		public InsertSearchBooksToDB(ArrayList<LikeBook> books) {
			this.books = books;
		}
		@Override
		public void run() {
			MyApplication.getMyDBHelper().insertOneSearch(searchSetting, searchBox.getSearchText(), books);
		}
		
	}
}

